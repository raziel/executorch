namespace executorch;

// Identifier of a valid executor schema.
file_identifier "ET01";
// Extension of written files.
file_extension "extorch";

// Table of raw data buffers, used for constant Values (e.g. like
// weight tensors), who reference it by index.
// The alignment accommodates mmap-friendly data structures.
table Buffer {
  data:[ubyte] (force_align: 16);
}

table Kernel {
  // Operator registry and lookup is uniquely identified by its name and
  // overload name.
  // TODO: consider more efficient way to represent this.
  name:string;
  overload:string;

  // Indexes to the (values) required by the operation (in and out).
  in_args:[int];
  out_args:[int];
}

// A sequence of blocking kernels to be executed in order.
table Chain {
  // Indices of the values that are (non-static) inputs into this Chain.
  inputs:[int];

  // Indices of the values that are outputs out of this Chain.
  outputs:[int];

  // List of (blocking) kernels to be executed in order.
  // TODO: async kernel abstraction?
  kernels:[Kernel];
}

table QuantizedSchema {
  qscheme:byte;
  scale:double;
  zero_point:int;
  scales:Tensor;
  zero_points:Tensor;
  axis:int;
}

table Tensor {
  // The tensor format should be compatible to existing PyTorch tensor format
  storage_location_index:uint;
  // enum ScalarType
  scalar_type:byte;
  storage_offset:int;
  sizes:[int];
  strides:[int];
  requires_grad:bool;

  // only set for quantized tensors
  quantized_schema:QuantizedSchema;
}

// Reason for basic struct: union value type can only be table/struct/string
struct Int {
  int_val:long;
}

struct Bool {
  bool_val:bool;
}

struct Double{
  double_val:double;
}

table IntList {
  items:[long];
  // Q: Would it need to be RW like input/output/intermediate?
  // If so, do we need to assign 0 buffer offset, and include in memory planning?
}

table DoubleList {
  items:[double];
}

table BoolList {
  items:[bool];
}

// Subset of IValue types of full PyTorch
union ValueUnion {
  Int,
  Bool,
  Double,
  Tensor,
  IntList,
  DoubleList,
  BoolList,
  // Device, // To verify
}

// Abstraction for program values.
// TODO: How does this correspond to IValue and Tensor PyTorch types?
table Value {
  val:ValueUnion;
}

table ExecutionPlan {
  // A list of all values used in this execution plan.
  values:[Value];

  // Indices to the 'values' that are inputs to this execution plan.
  // This list contains only the non-constant tensors (i.e. not part of
  // the saved program).
  inputs:[int];

  // Indices to the 'values' that are outputs of this execution plan.
  // This signals a lifespan that goes beyond the execution.
  outputs:[int];

  // List of Chains of kernels.
  chains:[Chain];

  // Async? part of the chain?
}

table Program {
  // Schema version.
  version:uint;

  // Separate it in case we want to allow to have more than one way
  // to execute the same program, for portability across devices.
  execution_plan:[ExecutionPlan];

  // Buffers of the model.
  // Note the 0th entry of this array must be an empty buffer (sentinel) to be
  // used by writable (non-constant) Values.
  buffers:[Buffer];
}

root_type Program;