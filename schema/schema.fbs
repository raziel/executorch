namespace executorch;

// Identifier of a valid executor schema.
file_identifier "ET01";
// Extension of written files.
file_extension "extorch";

// Table that contains the metadata about how
// to unflatten the flattened output from compiler
table OutputContainerMetadata {
  encoded_str:string;
}

table QuantizedSchema {
  qscheme:byte;
  scale:double;
  zero_point:int;
  scales:Tensor;
  zero_points:Tensor;
  axis:int;
}

table Tensor {
  // enum ScalarTypegit
  scalar_type:byte;
  storage_offset:int;
  sizes:[int];
  strides:[int];

  // out of scope M1
  requires_grad:bool;

  // Tensor's data can be located in a specific memory pool.
  // We use mem_id to refer to a memory pool, and the offset
  // to refer to the offset wrt the base address of that pool.
  mem_id:int;
  mem_offset:int;

  // only set for quantized tensors
  quantized_schema:QuantizedSchema;
}

// Reason for basic struct: union value type can only be table/struct/string
struct Int {
  int_val:long;
}

struct Bool {
  bool_val:bool;
}

struct Double {
  double_val:double;
}

table String {
  string_val:string;
}

table IntList {
  items:[long];
  // Q: Would it need to be RW like input/output/intermediate?
  // If so, do we need to assign 0 buffer offset, and include in memory planning?
}

table DoubleList {
  items:[double];
}

table BoolList {
  items:[bool];
}

table TensorList {
  items:[Tensor];
}


// Subset of IValue types of full PyTorch
union ValueUnion {
  Int,
  Bool,
  Double,
  Tensor,
  String,
  IntList,
  DoubleList,
  BoolList,
  TensorList,
}

// Abstraction for program values.
// TODO: How does this correspond to IValue and Tensor PyTorch types?
table EValue {
  val:ValueUnion;
}

table Operator {
  // Operator registry and lookup is uniquely identified by its name and
  // overload name.
  // TODO: consider more efficient way to represent this.
  name:string;
  overload:string;
}

table Kernel {
  // Index to the operators table in the program.
  op_index:int;

  // Indexes to the (values) required by the operation (in and out).
  args:[int];
}

struct Instruction {
  // Should op be enum instead?
  op:byte; // 8-bit
  x:int; // 32-bit, used as table index or PC it jumps to
  n:byte; // Since it's alined to 16-bit, it's used for pading. Could be used for extention in future.
}

// A sequence of blocking kernels to be executed in order.
table Chain {
  // Indices of the values that are (non-static) inputs into this Chain.
  inputs:[int];

  // Indices of the values that are outputs out of this Chain.
  outputs:[int];

  // Kernel table for CALL_KERNEL to call.
  kernels:[Kernel];

  // List of instructions to be executed in order.
  instructions:[Instruction];
}

table ExecutionPlan {
  // A list of all values used in this execution plan.
  values:[EValue];

  // Indices to the 'Evalues' that are inputs to this execution plan.
  // This list contains only the non-constant tensors (i.e. not part of
  // the saved program).
  inputs:[int];

  // Indices to the 'Evalues' that are outputs of this execution plan.
  // This signals a lifespan that goes beyond the execution.
  outputs:[int];

  // List of Chains of kernels.
  chains:[Chain];

  // Operators used in this execution plan
  operators:[Operator];

  // Async? part of the chain?
}

table Program {
  // Schema version.
  version:uint;

  // Separate it in case we want to allow to have more than one way
  // to execute the same program, for portability across devices.
  execution_plan:[ExecutionPlan];

  // Table of constant binary, used for constant Values (e.g.
  // data field of weight tensors). It's accessed by address offset.
  // The alignment accommodates mmap-friendly data structures.
  // By default this buffer is in mem_id 0
  constant_buffer:[ubyte] (force_align: 16);
}

root_type Program;
